<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>My Java Docking Framework : FAQ</title>
        <author email="adecaro@users.sourceforge.net">Angelo De Caro</author>
    </properties>

    <body>

        <section name="Frequently Asked Questions">
            <subsection name="ToolWindowManager">
                <ol type="1">
                    <li>
                        <a href="#TWM_Init">How to init a ToolWindowManager?</a>
                        <a href="#TWM_Register">How to register a ToolWindow?</a>
                        <a href="#TWM_Unregister">How to unregister a ToolWindow?</a>
                        <a href="#TWM_Alias">How to add a ToolWindow Alias?</a>
                        <a href="#TWM_Descriptor">How to get a ToolWindowManagerDescriptor instance?</a>
                        <a href="#TWM_PushAway">How to set the PushAwayMode?</a>
                        <a href="#TWM_Corner">How to set a Corner Component?</a>
                        <a href="#TWM_Register">How to register a ToolWindow?</a>
                    </li>
                </ol>
            </subsection>

            <subsection name="ToolWindow">
                <ol type="1">
                    <li>
                        <a href="#TW_ShowHide">How to show or hide a ToolWindow?</a>
                    </li>
                    <li>
                        <a href="#TW_Activate">How to activate a ToolWindow?</a>
                    </li>
                    <li>
                        <a href="#TW_Move">How to move a ToolWindow?</a>
                    </li>
                    <li>
                        <a href="#TW_Flashing">How to request attention using Flashing?</a>
                    </li>
                    <li>
                        <a href="#TW_PCL">How to add a PropertyChangeListener?</a>
                    </li>
                    <li>
                        <a href="#TW_PopupMenu">How to enable/disable the PopupMenu?</a>
                    </li>
                    <li>
                        <a href="#TW_Tools">How to manage the Tools Menu?</a>
                    </li>
                    <li>
                        <a href="#TW_DockPanelLength">How to set the Dock Panel Length?</a>
                    </li>
                    <li>
                        <a href="#TW_ToolWindowActionHandler">How to set a ToolWindowActionHandler?</a>
                    </li>
                    <li>
                        <a href="#TW_PreviewMode">How to enable the Preview Mode?</a>
                    </li>
                    <li>
                        <a href="#TW_STD_TransparentMode">How to enable the Transparent Mode on SlidingType?</a>
                    </li>
                    <li>
                        <a href="#TW_STD_TransparentMode">How to enable the Transparent Mode on SlidingType?</a>
                    </li>
                    <li>
                        <a href="#TW_STD_TransparentMode">How to enable the Transparent Mode on SlidingType?</a>
                    </li>
                    <li>
                        <a href="#TW_STD_TransparentMode">How to enable the Transparent Mode on SlidingType?</a>
                    </li>
                    <li>
                        <a href="#TW_STD_TransparentMode">How to enable the Transparent Mode on SlidingType?</a>
                    </li>
                    <li>
                        <a href="#TW_STD_TransparentMode">How to enable the Transparent Mode on SlidingType?</a>
                    </li>
                </ol>
            </subsection>

            <subsection name="ToolWindowTab">
                <ol type="1">
                    <li>
                        <a href="#TWT_Add">How to add a ToolWindowTab?</a>
                    </li>
                </ol>
            </subsection>

            <subsection name="ToolWindowGroup">
                <ol type="1">
                    <li>
                        <a href="#TWT_Add">How to add a ToolWindowTab?</a>
                    </li>
                </ol>
            </subsection>

            <subsection name="ContentManager">
                <ol type="1">
                    <li>
                        <a href="#TWT_Add">How to add a ToolWindowTab?</a>
                    </li>
                </ol>
            </subsection>

            <subsection name="ContentManagerUI">
                <ol type="1">
                    <li>
                        <a href="#TWT_Add">How to add a ToolWindowTab?</a>
                    </li>
                </ol>
            </subsection>

            <subsection name="ContentUI">
                <ol type="1">
                    <li>
                        <a href="#TWT_Add">How to add a ToolWindowTab?</a>
                    </li>
                </ol>
            </subsection>

            <subsection name="PersistenceDelegate">
                <ol type="1">
                    <li>
                        <a href="#TWT_Add">How to add a ToolWindowTab?</a>
                    </li>
                </ol>
            </subsection>

        </section>

        <section name="ToolWindowManager">
            <a name="TWM_Init"/>
            <subsection name="How to init a ToolWindowManager?">
                <p>
                    To obtain an instance of the <code>ToolWindowManager</code> interface
                    you have to instantiate the
                    <code>MyDoggyToolWindowManager</code> class which provides the default implementation.
                    <br/>
                    Use the following:
                </p>
                <source>ToolWindowManager twManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;</source>
                <p>or</p>
                <source>ToolWindowManager toolWindowManager = new MyDoggyToolWindowManager(
                  Locale.getDefault() // A Locale instance
    );
                </source>
                <p>
                    MyDoggyToolWindowManager is implemented like a JPanel so you can use it like any other component.
                    <br/>
                    For example:
                </p>
                <source>JFrame frame = new JFrame("MyDoggy-Set...");
...
MyDoggyToolWindowManager myDoggyToolWindowManager = new MyDoggyToolWindowManager();
...
frame.getContentPane().add(myDoggyToolWindowManager);</source>
                <p>
                    Warning: to be able to use all the toolwindow types (Sliding, Floating Live, etc.),
                    ensure that the toolwindow manager
                    has as window ancestor an object implementing the <code>RootPaneContainer</code> interface
                    (i.e. JFrame, JWindow, JApplet, ...).
                </p>

            </subsection>
            <a name="TWM_Register"/>
            <subsection name="How to register a ToolWindow?">
                Use the following :
                <source>ToolWindowManager twManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;
ToolWindow debugTool = twManager.registerToolWindow(
       "Debug",               // Tool Window identifier
       "Debug Tool",          // Tool Window Title
       debugIcon,             // Tool Window Icon
       debugComponent,        // Tool Window component
       ToolWindowAnchor.LEFT  // Tool Window anchor
);
</source>
            </subsection>
            <a name="TWM_Unregister"/>
            <subsection name="How to unregister a ToolWindow?">
                Use the following :
                <source>ToolWindowManager twManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;
twManager.unregisterToolWindow("Debug");
</source>
            </subsection>
            <a name="TWM_Alias"/>
            <subsection name="How to add a ToolWindow Alias?">
                Use the following :
                <source>ToolWindowManager twManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;
Object debugToolAlias = new DebugToolAlias();
twManager.addAlias(debugTool, debugToolAlias);
</source>
            </subsection>
            <a name="TWM_Descriptor"/>
            <subsection name="How to get a ToolWindowManagerDescriptor instance?">
                <p>
                    To obtain the instance of the ToolWindowManagerDescriptor for a specific ToolWindowManager use the following:
                </p>
                <source>

ToolWindowManagerDescriptor descriptor = twManager.getToolWindowManagerDescriptor();

</source>
            </subsection>
            <a name="TWM_PushAway"/>
            <subsection name="How to set the PushAwayMode?">
                <p>
                    After you have obtained an instance of the ToolWindowManagerDescriptor for a specific ToolWindowManager use
                    the following to change to PushAwayMode:
                </p>
                <source>

ToolWindowManagerDescriptor descriptor = twManager.getToolWindowManagerDescriptor();
descriptor.setPushAwayMode(PushAwayMode.MOST_RECENT);

</source>
                <p>
                    To retrieve the current PushAwayMode use the following:
                </p>
                <source>
ToolWindowManagerDescriptor descriptor = twManager.getToolWindowManagerDescriptor();
PushAwayMode pushAwayMode = descriptor.getPushAwayMode();</source>
            </subsection>
            <a name="TWM_Corner"/>
            <subsection name="How to set a Corner Component?">
                <p>
                    After you have obtained an instance of the ToolWindowManagerDescriptor for a specific ToolWindowManager use
                    the following to set a corner component:
                </p>
                <source>
ToolWindowManagerDescriptor descriptor = twManager.getToolWindowManagerDescriptor();
descriptor.setCornerComponent(
                    ToolWindowManagerDescriptor.Corner.NORD_WEST,
                    new JLabel("NW"));</source>
            </subsection>
        </section>

        <section name="ToolWindow">
            <a name="TW_ShowHide"/>
            <subsection name="How to show or hide a ToolWindow?">
                Use the following :
                <source>
                    ToolWindow tool = toolWindowManager.getToolWindow(0);
                    tool.setVisibile(true); // false to hide
                </source>
                <p>
                    The tool shows or hides the component in a way that depends on tool window type.
                    <br/>
                    There is an another way to show a tool. You can use the aggregate methedo
                </p>
                <a name="aggregate"/>
                <source>
                    ToolWindow tool = toolWindowManager.getToolWindow(0);
                    tool.aggregate();
                </source>
                <p>
                    The method is used to set to the true value the visible property of the tool.
                    The tool becomes visible in a special way. In fact, if there is another tool visible
                    with the same anchor than these two tools will be aggregate to be visible both.
                </p>
            </subsection>

            <a name="TW_Activate"/>
            <subsection name="How to activate a ToolWindow?">
                Use the following :
                <source>
                    ToolWindow tool = toolWindowManager.getToolWindow(0);
                    tool.setActive(true); // false to deactivate
                </source>
                <p>The tool grabs the focus from focus owner and becomes active.</p>
            </subsection>

            <a name="TW_Move"/>
            <subsection name="How to Move a ToolWindow?">
                Use the following :
                <source>
                    ToolWindow tool = toolWindowManager.getToolWindow(0);
                    tool.setAnchor(ToolWindowAnchor.TOP);
                </source>
                <p>The anchor specifies the position of the tool when it is anchored to the docking system.</p>
            </subsection>

            <a name="TW_Flashing"/>
            <subsection name="How to request attention using Flashing?">
                Use the following :
                <source>
                    ToolWindow tool = toolWindowManager.getToolWindow(0);
                    tool.setFlashing(true); // false to disable
                </source>
                <p>
                    Sets the flashing mode. If the flashing mode is enabled then the toolwindow representative button
                    will be flashing until the tool will be made visible. If the tool is visible but not active then
                    the toolwindow title bar will be flashing until the tool will be made visible.
                    <br/>
                    You can use
                    <code>setFlashing(int)</code>
                    to enable flashing for a specific duration.
                </p>
            </subsection>

            <a name="TW_PCL"/>
            <subsection name="How to add a PropertyChangeListener?">
                Use the following :
                <source>
                    ToolWindow tool = toolWindowManager.getToolWindow(0);
                    tool.setAnchor(ToolWindowAnchor.TOP);
                </source>
                <p>
                    Adds a PropertyChangeListener to the listener list. The listener is
                    registered for all bound properties of this class, including the
                    following:
                    <ul>
                        <li>this tool's index ("index")</li>
                        <li>this tool's aailable status ("available")</li>
                        <li>this tool's visible status ("visible")</li>
                        <li>this tool's active status ("active")</li>
                        <li>this tool's anchor ("anchor")</li>
                        <li>this tool's autoHide ("autoHide")</li>
                        <li>this tool's type ("type")</li>
                        <li>this tool's icon ("icon")</li>
                        <li>this tool's title ("title")</li>
                    </ul>
                </p>
            </subsection>

            <a name="TW_PopupMenu"/>
            <subsection name="How to enable/disable the PopupMenu?">
                Use the following :
                <source>
                    DockedTypeDescriptor desc = (DockedTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.DOCKED);
                    desc.setPopupMenuEnabled(true); // false to denie.
                </source>
                <p>
                    So you can Specifies whether the popup menu of the representative anchor button of the tool should
                    be enabled.
                </p>
            </subsection>

            <a name="TW_Tools"/>
            <subsection name="How to manage the Tools Menu?">
                Use the following to retrieve the tools menu:
                <source>
                    DockedTypeDescriptor desc = (DockedTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.DOCKED);
                    JMenu menu = desc.getToolsMenu();
                    menu.addJMenuItem(new JMenuItem("Hello World!!!");
                </source>
                <p>
                    The user can add specific menu items to the popup menu of the representative anchor button of the
                    tool using
                    the result of this method invocation.
                </p>
            </subsection>

            <a name="TW_DockPanelLength"/>
            <subsection name="How to set the Dock Panel Length?">
                Use the following:
                <source>
                    DockedTypeDescriptor desc = (DockedTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.DOCKED);
                    desc.setDockLength(150);
                </source>
                <p>
                    Sets the width or heigth, based on anchor of tool window, of the dock panel.
                    This value is used by DOCKED and SLIDING tool window type.
                </p>
            </subsection>

            <a name="TW_ToolWindowActionHandler"/>
            <subsection name="How to set a ToolWindowActionHandler?">
                Use the following:
                <source>
                    DockedTypeDescriptor desc = (DockedTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.DOCKED);
                    desc.setToolWindowActionHandler(new ToolWindowActionHandler(){...});
                </source>
                <p>
                </p>
            </subsection>

            <a name="TW_PreviewMode"/>
            <subsection name="How to enable the Preview Mode?">
                Use the following :
                <source>
                    DockedTypeDescriptor desc = (DockedTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.DOCKED);
                    desc.setPreviewEnabled(true); // false to disable
                </source>
                <p>
                    Sets the preview mode. If the preview mode is enabled then when the mouse waits
                    on the toolwindow representative button after a delay time the preview will become visible.
                    <br/>
                    You can use
                    <code>setPreviewTransparentRatio</code>
                    and
                    <code>setPreviewDelay</code>
                    methods
                    to set transparency paramenters and delay.
                </p>
            </subsection>

            <a name="TW_STD_TransparentMode"/>
            <subsection name="How to enable the Transparent Mode on SlidingType?">
                Use the following :
                <source>
                    SlidingTypeDescriptor desc = (SlidingTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.SLIDING);
                    desc.setTransparentMode(true); // false to disable
                </source>
                <p>
                    Sets the transparent mode. If the transparent mode is enabled then when the toolwindow's content
                    losts the focus it becomes transparent. This facility is os-independent.
                    <br/>
                    You can use
                    <code>setTransparentRatio</code>
                    and
                    <code>setTransparentDelay</code>
                    methods
                    to set transparency paramenters and delay.
                </p>
            </subsection>

            <a name="TW_STD_EnableDisable"/>
            <subsection name="Enable/Disable">
                Use the following :
                <source>
                    SlidingTypeDescriptor desc = (SlidingTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.SLIDING);
                    desc.setEnabled(true); // false to disable
                </source>
                <p>
                    Enables or disables this mode, depending on the value of the
                    parameter<code>enabled</code>. An enabled mode can used by user.
                    This Mode is enabled initially by default.
                </p>
            </subsection>

            <a name="TW_FTD_TransparentMode"/>
            <subsection name="Enable Transparent Mode on FloatingType">
                Use the following :
                <source>
                    FloatingTypeDescriptor desc = (FloatingTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.SLIDING);
                    desc.setTransparentMode(true); // false to disable
                </source>
                <p>
                    Sets the transparent mode. If the transparent mode is enabled then when
                    the window used by
                    <code>FLOATING</code>
                    and
                    <code>FLOATING_FREE</code>
                    type losts
                    the focus it becomes transparent. This facility is os-dependent.
                    <br/>
                    You can use
                    <code>setTransparentRatio</code>
                    and
                    <code>setTransparentDelay</code>
                    methods
                    to set transparency paramenters and delay.
                </p>
            </subsection>

            <a name="TW_FTD_EnableDisable"/>
            <subsection name="Enable/Disable">
                Use the following :
                <source>
                    FloatingTypeDescriptor desc = (FloatingTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.SLIDING);
                    desc.setEnabled(true); // false to disable
                </source>
                <p>
                    Enables or disables this mode, depending on the value of the
                    parameter<code>enabled</code>. An enabled mode can used by user.
                    This Mode is enabled initially by default.
                </p>
            </subsection>

            <a name="TW_FTD_ChangePosition"/>
            <subsection name="Change Window Position">
                Use the following :
                <source>
                    FloatingTypeDescriptor desc = (FloatingTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.SLIDING);
                    desc.setPosition(150, 220);
                </source>
                <p>
                    Sets the window location. This location is also used the first time the window becomes visible.
                    The top-left corner of the new location
                    is specified by the
                    <code>x</code>
                    and
                    <code>y</code>
                    parameters in the system coordinate space.
                </p>
            </subsection>

            <a name="TW_FTD_ChangeSize"/>
            <subsection name="Change Window Size">
                Use the following :
                <source>
                    FloatingTypeDescriptor desc = (FloatingTypeDescriptor)
                    debugTool.getTypeDescriptor(ToolWindowType.SLIDING);
                    desc.setSize(320, 200);
                </source>
                <p>
                    Sets the window size. This size is also used the first time the window becomes visible.
                </p>
            </subsection>

        </section>

        <section name="ToolWindowTab">

            <a name="TWT_Add"/>
            <subsection name="How to add a ToolWindowTab?">
                Use the following :
                <source>
                    ToolWindow tool = toolWindowManager.getToolWindow(0);
                    tool.addToolWindowTab("Title", component);
                </source>
                <p>
                    Adds a
                    <code>component</code>
                    represented by a
                    <code>title</code>
                    and no icon.
                </p>
            </subsection>

        </section>

        <section name="ToolWindowGroup">
            <subsection name="How to get a group?">
                Use the following :
                <source>
ToolWindowGroup group = toolWindowManager.getToolWindowGroup("group_name");
</source>
                <p>
                    Returns the tool window group to which this manager maps the specified name.
                    If the manager contains no mapping for this name then the manager create a new instance
                    of ToolWindowGroup and associates the group created with the specified name in this manager.
                </p>
            </subsection>

            <subsection name="How to remove a group?">
                Use the following :
                <source>
toolWindowManager.removeToolWindowGroup("group_name");
</source>
                <p>
                    Removes the tool window group for this name from this manager if it is present.
                </p>
            </subsection>

            <subsection name="How to check if a group exists?">
                Use the following :
                <source>
boolean contains = toolWindowManager.containsGroup("group_name");
</source>
                <p>
                    Returns <tt>true</tt> if this manager contains a group for the specified name.
                </p>
            </subsection>

            <subsection name="How to add a toolwindow to a group?">
                Use the following :
                <source>
ToolWindowGroup group = toolWindowManager.getToolWindowGroup("group_name");
ToolWindow debugTool = toolWindowManager.getToolWindow("Debug");
group.addToolWindow(debugTool);
</source>
                <p>
                    Appends the specified tool window to the end of this group.
                </p>
            </subsection>

            <subsection name="How to Remove a toolwindow from a group?">
                Use the following :
                <source>
ToolWindowGroup group = toolWindowManager.getToolWindowGroup("group_name");
ToolWindow debugTool = toolWindowManager.getToolWindow("Debug");
group.removeToolWindow(debugTool);
</source>
                <p>
                    Removes the occurrence in this group of the specified tool window.
                </p>
            </subsection>

            <subsection name="How to show or hide a group?">
                Use the following :
                <source>
ToolWindowGroup group = toolWindowManager.getToolWindowGroup("group_name");
group.setVisible(true);
</source>
                <p>
                    Invokes <code>setVisible(visible)</code> on all toolwindows contained in this group
                    in proper sequence.
                </p>
            </subsection>

            <subsection name="How to add a ToolWindowGroupListener?">
                Use the following :
                <source>
ToolWindowGroup group = toolWindowManager.getToolWindowGroup("group_name");
group.addToolWindowGroupListener(listener);
</source>
                <p>
                    Registers <code>listener</code> so that it will receive events when
                    the groups are made visibile or invisible, when a tool is added or removed.
                    If listener <code>listener</code> is <code>null</code>,
                    no exception is thrown and no action is performed.
                </p>
            </subsection>
        </section>

        <section name="ContentManager">
            <subsection name="How to add a content?">
                Use the following :
                <source>
ContentManager contentManager = toolWindowManager.getContentManager();
Content tools = ContentcontentManager.addContent("Tools"   // Content Key
                                                 "Tools",  // Content title
                                                 null,     // Content Item
                                                 toolsContent, // Content component
                                                 "ToolWindows" // Content tooltip text
);
</source>
                <p>
                    Adds a <code>component</code> represented by a unique identifier <code>key</code>
                    with a <code>title</code> and/or <code>icon</code>, either of which can be <code>null</code>.
                </p>
            </subsection>

            <subsection name="How to remove a content?">
                Use the following :
                <source>
ContentManager contentManager = toolWindowManager.getContentManager();
contentManager.removeContent(tools);
</source>
                <p>
                    Removes the content from the manager.
                </p>
            </subsection>

            <subsection name="How to get the selected content?">
                Use the following :
                <source>
ContentManager contentManager = toolWindowManager.getContentManager();
Content content = contentManager.getSelectedContent();
</source>
                <p>
                    Returns the selected content, or <code>null</code> if the selection is empty.
                </p>
            </subsection>

            <subsection name="How to change the ContentManagerUI?">
                Use the following :
                <source>
ContentManager contentManager = toolWindowManager.getContentManager();
ContentManagerUI contentManagerUI = new <a href="./../mydoggy-plaf/index.html#ContentManageUI">... TODO</a>
contentManager.setContentManagerUI(contentManagerUI);</source>
                <p>
                    Sets the content manager ui to <code>contentManagerUI</code>.
                </p>
            </subsection>

            <subsection name="How to enable/disable the ContentManager?">
                Use the following :
                <source>
ContentManager contentManager = toolWindowManager.getContentManager();
contentManager.setEnabled(false); // or true to enable
</source>
                <p>
                    Enables or disables the content manager. If the content manager is disable the whole space
                    will be available for toolwindows.
                </p>
            </subsection>
        </section>

        <section name="ContentManagerUI">
            <subsection name="How to obtain the instance of the ContentManagerUI interface?">
                Use the following :
                <source>
ContentManagerUI contentManagerUI = toolWindowManager.getContentManager().getContentManagerUI();
</source>
                <p>
                    Returns the content manager ui.
                </p>
            </subsection>

            <subsection name="How to change the ContentManagerUI?">
                Use the following :
                <source>
toolWindowManager.getContentManager().setContentManagerUI(new MyDoggyDesktopContentManagerUI());
</source>
                <p>
                    Sets the content manager ui.
                </p>
            </subsection>

            <subsection name="How to set 'Closeable' and 'Detachable' property?">
                Use the following :
                <source>
ContentManagerUI contentManagerUI = toolWindowManager.getContentManager().getContentManagerUI();
contentManagerUI.setCloseable(true);
contentManagerUI.setsetDetachable(true);
</source>
                <p>
                    Sets the 'Closeable' and/or 'Detachable' property of all contents registered to content manager.
                </p>
            </subsection>

            <subsection name="How to add a ContentManagerUIListener?">
                Use the following :
                <source>
ContentManagerUI contentManagerUI = toolWindowManager.getContentManager().getContentManagerUI();
contentManagerUI.addContentManagerUIListener(listener);
</source>
                <p>
                    Registers <code>listener</code> so that it will receive events when
                    a content is removed or detached using the ui. For the remove action you can apply a veto to the action.
                    If listener <code>listener</code> is <code>null</code>,
                    no exception is thrown and no action is performed.
                </p>
            </subsection>
        </section>

        <section name="ContentUI">
            <a name="CUI_GET1"/>
            <subsection name="How to retrieve the ContentUI given a Content?">
                Use the following :
                <source>
ContentManagerUI contentManagerUI = toolWindowManager.getContentManager().getContentManagerUI();
Content content = toolWindowManager.getContentManager().getContent(0);
ContentUI contentUi = contentManagerUI.getContentUI(content);
</source>
                <p>
                    Returns the ui part to which this manager maps the specified <code>content</code>.
                </p>
            </subsection>

            <a name="CUI_GET2"/>
            <subsection name="How to retrieve the Content from a ContentUI?">
                Use the following :
                <source>
ContentManagerUI contentManagerUI = toolWindowManager.getContentManager().getContentManagerUI();
Content content = toolWindowManager.getContentManager().getContent(0);
ContentUI contentUi = contentManagerUI.getContentUI(content);
assert contentUi.getContent() == content;
</source>
                <p>
                    Returns the Content contropart of a ContentUI instance.
                </p>
            </subsection>

            <a name="CUI_SET_CD"/>
            <subsection name="How to set the 'Closeable' and 'Detachable' property?">
                Use the following :
                <source>
ContentManagerUI contentManagerUI = toolWindowManager.getContentManager().getContentManagerUI();
Content content = toolWindowManager.getContentManager().getContent(0);
ContentUI contentUi = contentManagerUI.getContentUI(content);
contentUi.setCloseable(true);
contentUi.setDetachable(true);
</source>
                <p>
                    Sets the 'Closeable' and/or 'Detachable' property of a specific ContentUI.
                </p>
            </subsection>

            <a name="CUI_Transparency"/>
            <subsection name="How to customize transparency support?">
                Use the following :
                <source>
ContentManagerUI contentManagerUI = toolWindowManager.getContentManager().getContentManagerUI();
Content content = toolWindowManager.getContentManager().getContent(0);
ContentUI contentUi = contentManagerUI.getContentUI(content);
contentUi.setTransparentMode(true);
contentUi.setTransparentRatio(0.7f);
contentUi.setTransparentDelay(1000);
</source>
                <p>
                    Sets the transparent mode. If the transparent mode is enabled then when
                    the content is detached and the window containing the content losts
                    the focus then the window becomes transparent. This facility is os-dependent.
                </p>
            </subsection>

        </section>

        <section name="PersistenceDelegate">
            <a name="PD_GET"/>
            <subsection name="How to get an instance of the PersistenceDelegate interface?">
                <p>
                    To obtain the instance of the PersistenceDelegate for a specific ToolWindowManager use the following:
                </p>
                <source>PersistenceDelegate pstDelegate = twManager.getPersistenceDelegate();</source>
            </subsection>

            <a name="PD_STORE"/>
            <subsection name="How to store a workspace?">
                <p>
                    After you have obtained an instance of the PersistenceDelegate for a specific ToolWindowManager use
                    the following to store the workspace:
                </p>
                <source>PersistenceDelegate pstDelegate = twManager.getPersistenceDelegate();
try {
    FileOutputStream output = new FileOutputStream("workspace.xml");
    twManager.getPersistenceDelegate().save(output);
    output.close();
} catch (Exception e) {
    e.printStackTrace();
}</source>
            </subsection>

            <a name="PD_RESTORE"/>
            <subsection name="How to restore a saved workspace?">
                <p>
                    After you have obtained an instance of the PersistenceDelegate for a specific ToolWindowManager use
                    the following to apply a saved workspace to the current workspace:
                </p>
                <source>PersistenceDelegate pstDelegate = twManager.getPersistenceDelegate();
try {
    FileInputStream inputStream = new FileInputStream("workspace.xml");
    pstDelegate.apply(inputStream);
    inputStream.close();
} catch (Exception e1) {
    e1.printStackTrace();
}</source>

                <p>
                    Using <code>merge(InputStream, MergePolicy)</code> method, you can decide the method's behaviour
                    relative to the tools already visible when the method is called.
                </p>
                <source>PersistenceDelegate pstDelegate = twManager.getPersistenceDelegate();
try {
    FileInputStream inputStream = new FileInputStream("workspace.xml");
    pstDelegate.merge(
                    inputStream,
                    PersistenceDelegate.MergePolicy.RESET);
    inputStream.close();
} catch (Exception e1) {
    e1.printStackTrace();
}</source>
            </subsection>
        </section>
    </body>

</document>
