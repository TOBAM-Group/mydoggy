<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>MyDoggy - My Java Docking Framework (API) : ToolWindowManager</title>
        <author email="adecaro@users.sourceforge.net">Angelo De Caro</author>
    </properties>

    <body>
        <section name="ToolWindowManager">
            <p>
                This interface is the main entry point to manage MyDoggy. Using this interface
                the user can register/unregister toolwindows, groups. The user can get the
                content manager instance and type descriptor templates.
                <br/>
            </p>
            
            <subsection name="MyDoggyToolWindowManager">
                <p>
                    To obtain an instance of <code>ToolWindowManager</code> interface you have to instantiate the
                    <code>MyDoggyToolWindowManager</code> class. This is the default implementation.
                    <br/>
                    To obtain an instance use the following (for example):
                </p>
                <source>ToolWindowManager toolWindowManager = new MyDoggyToolWindowManager();
                </source>
                <p>or</p>
                <source>ToolWindowManager toolWindowManager = new MyDoggyToolWindowManager(
                  Locale.getDefault() // A Locale instance
    );
                </source>
                <p>
                    MyDoggyToolWindowManager is implemented like a JPanel so you can use it like any other component.
                    <br/>
                    For example:
                </p>
                <source>JFrame frame = new JFrame("MyDoggy-Set...");
    ...
    MyDoggyToolWindowManager myDoggyToolWindowManager = new MyDoggyToolWindowManager();
    ...
    frame.getContentPane().add(myDoggyToolWindowManager);</source>
                <p>
                    To enable all toolwindow types (Sliding, Floating Live, etc.), MyDoggyToolWindowManager
                    must be have as window ancestor an object implementing the <code>RootPaneContainer</code> interface
                    (i.e. JFrame, JWindow, JApplet, ...).
                </p>

            </subsection>

            <subsection name="ToolWindowManagerDescriptor">
                <p>
                    This interface is used to modify the behaviours of the ToolWindowManager.
                    <br/>
                    You can now change the push-away mode of toolwindows and set corner components.
                    See Using page for how to.
                </p>
            </subsection>

        </section>

        <section name="Using the ToolWindowManager">
            <subsection name="To get a new instance of ToolWindowManager">
                Use the following :
                <source>ToolWindowManager twManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;</source>
            </subsection>
            <subsection name="To register a ToolWindow">
                Use the following :
                <source>ToolWindowManager twManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;
ToolWindow debugTool = twManager.registerToolWindow(
       "Debug",               // Tool Window identifier
       "Debug Tool",          // Tool Window Title
       debugIcon,             // Tool Window Icon
       debugComponent,        // Tool Window component
       ToolWindowAnchor.LEFT  // Tool Window anchor
);
</source>
            </subsection>
            <subsection name="To unregister a ToolWindow">
                Use the following :
                <source>ToolWindowManager twManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;
twManager.unregisterToolWindow("Debug");
</source>
            </subsection>
            <a name="aliasing"/>
            <subsection name="To add a ToolWindow's Alias">
                Use the following :
                <source>ToolWindowManager twManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;
Object debugToolAlias = new DebugToolAlias();
twManager.addAlias(debugTool, debugToolAlias);
</source>
            </subsection>
        </section>

        <section name="Using the ToolWindowManagerDescriptor">
            <subsection name="ToolWindowManagerDescriptor">
                <p>
                    To obtain the instance of the ToolWindowManagerDescriptor for a specific ToolWindowManager use the following:
                </p>
                <source>

ToolWindowManagerDescriptor descriptor = twManager.getToolWindowManagerDescriptor();

</source>
            </subsection>
            <a name="PushAwayMode"/>
            <subsection name="ToolWindowManagerDescriptor - PushAwayMode">
                <p>
                    After you have obtained an instance of the ToolWindowManagerDescriptor for a specific ToolWindowManager use
                    the following to change to PushAwayMode:
                </p>
                <source>

ToolWindowManagerDescriptor descriptor = twManager.getToolWindowManagerDescriptor();
descriptor.setPushAwayMode(PushAwayMode.MOST_RECENT);

</source>
                <p>
                    To retrieve the current PushAwayMode use the following:
                </p>
                <source>
ToolWindowManagerDescriptor descriptor = twManager.getToolWindowManagerDescriptor();
PushAwayMode pushAwayMode = descriptor.getPushAwayMode();</source>
            </subsection>
            <a name="CornerComponent"/>
            <subsection name="ToolWindowManagerDescriptor - Corner Component">
                <p>
                    After you have obtained an instance of the ToolWindowManagerDescriptor for a specific ToolWindowManager use
                    the following to set a corner component:
                </p>
                <source>
ToolWindowManagerDescriptor descriptor = twManager.getToolWindowManagerDescriptor();
descriptor.setCornerComponent(
                    ToolWindowManagerDescriptor.Corner.NORD_WEST,
                    new JLabel("NW"));</source>
            </subsection>
        </section>

        <a name="PersistenceDelegate"/>
        <section name="Using PersistenceDelegate">
            <subsection name="PersistenceDelegate">
                <p>
                    To obtain the instance of the PersistenceDelegate for a specific ToolWindowManager use the following:
                </p>
                <source>PersistenceDelegate pstDelegate = twManager.getPersistenceDelegate();</source>
            </subsection>
            <subsection name="PersistenceDelegate - Store Workspace">
                <p>
                    After you have obtained an instance of the PersistenceDelegate for a specific ToolWindowManager use
                    the following to store the workspace:
                </p>
                <source>PersistenceDelegate pstDelegate = twManager.getPersistenceDelegate();
try {
    FileOutputStream output = new FileOutputStream("workspace.xml");
    twManager.getPersistenceDelegate().save(output);
    output.close();
} catch (Exception e) {
    e.printStackTrace();
}</source>
            </subsection>
            <subsection name="PersistenceDelegate - Apply stored Workspace">
                <p>
                    After you have obtained an instance of the PersistenceDelegate for a specific ToolWindowManager use
                    the following to apply a saved workspace to the current workspace:
                </p>
                <source>PersistenceDelegate pstDelegate = twManager.getPersistenceDelegate();
try {
    FileInputStream inputStream = new FileInputStream("workspace.xml");
    pstDelegate.apply(inputStream);
    inputStream.close();
} catch (Exception e1) {
    e1.printStackTrace();
}</source>

                <p>
                    Using <code>merge(InputStream, MergePolicy)</code> method, you can decide the method's behaviour
                    relative to the tools already visible when the method is called.
                </p>
                <source>PersistenceDelegate pstDelegate = twManager.getPersistenceDelegate();
try {
    FileInputStream inputStream = new FileInputStream("workspace.xml");
    pstDelegate.merge(
                    inputStream,
                    PersistenceDelegate.MergePolicy.RESET);
    inputStream.close();
} catch (Exception e1) {
    e1.printStackTrace();
}</source>
            </subsection>
        </section>
    </body>
</document>
