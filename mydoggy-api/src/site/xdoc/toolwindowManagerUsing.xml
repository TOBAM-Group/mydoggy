<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>MyDoggy-Api : ToolWindowManager Using</title>
        <author email="adecaro@users.sourceforge.net">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Using ToolWindowManager">
            <subsection name="To get a new instance of ToolWindowManager">
                Use the following :
                <source>ToolWindowManager toolWindowManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;</source>
            </subsection>
            <subsection name="To register a ToolWindow">
                Use the following :
                <source>ToolWindowManager toolWindowManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;
ToolWindow debugTool = toolWindowManager.registerToolWindow(
       "Debug",               // Tool Window identifier
       "Debug Tool",          // Tool Window Title
       debugIcon,             // Tool Window Icon
       debugComponent,        // Tool Window component
       ToolWindowAnchor.LEFT  // Tool Window anchor
);
</source>
            </subsection>
            <subsection name="To unregister a ToolWindow">
                Use the following :
                <source>ToolWindowManager toolWindowManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;
toolWindowManager.unregisterToolWindow("Debug");
</source>
            </subsection>
            <a name="aliasing"/>
            <subsection name="To add a ToolWindow's Alias">
                Use the following :
                <source>ToolWindowManager toolWindowManager = new <a href="./../mydoggy-plaf/index.html">MyDoggyToolWindowManager(...)</a>;
Object debugToolAlias = new DebugToolAlias();
toolWindowManager.addAlias(debugTool, debugToolAlias);
</source>
            </subsection>
        </section>

        <section name="Using ToolWindowManagerDescriptor">
            <subsection name="ToolWindowManagerDescriptor">
                <p>
                    To obtain the instance of the ToolWindowManagerDescriptor for a specific ToolWindowManager use the following:
                </p>
                <source>
ToolWindowManagerDescriptor toolWindowManagerDescriptor = toolWindowManager.getToolWindowManagerDescriptor();</source>
            </subsection>
            <a name="PushAwayMode"/>
            <subsection name="ToolWindowManagerDescriptor - PushAwayMode">
                <p>
                    After you have obtained an instance of the ToolWindowManagerDescriptor for a specific ToolWindowManager use
                    the following to change to PushAwayMode:
                </p>
                <source>
ToolWindowManagerDescriptor toolWindowManagerDescriptor = toolWindowManager.getToolWindowManagerDescriptor();
toolWindowManagerDescriptor.setPushAwayMode(PushAwayMode.MOST_RECENT);</source>
                <p>
                    To retrieve the current PushAwayMode use the following:
                </p>
                <source>
ToolWindowManagerDescriptor toolWindowManagerDescriptor = toolWindowManager.getToolWindowManagerDescriptor();
PushAwayMode pushAwayMode = toolWindowManagerDescriptor.getPushAwayMode();</source>
            </subsection>
            <a name="CornerComponent"/>
            <subsection name="ToolWindowManagerDescriptor - Corner Component">
                <p>
                    After you have obtained an instance of the ToolWindowManagerDescriptor for a specific ToolWindowManager use
                    the following to set a corner component:
                </p>
                <source>
ToolWindowManagerDescriptor toolWindowManagerDescriptor = toolWindowManager.getToolWindowManagerDescriptor();
toolWindowManagerDescriptor.setCornerComponent(ToolWindowManagerDescriptor.Corner.NORD_WEST, new JLabel("NW"));</source>
            </subsection>
        </section>

        <a name="PersistenceDelegate"/>
        <section name="Using PersistenceDelegate">
            <subsection name="PersistenceDelegate">
                <p>
                    To obtain the instance of the PersistenceDelegate for a specific ToolWindowManager use the following:
                </p>
                <source>PersistenceDelegate persistenceDelegate = toolWindowManager.getPersistenceDelegate();</source>
            </subsection>
            <subsection name="PersistenceDelegate - Store Workspace">
                <p>
                    After you have obtained an instance of the PersistenceDelegate for a specific ToolWindowManager use
                    the following to store the workspace:
                </p>
                <source>PersistenceDelegate persistenceDelegate = toolWindowManager.getPersistenceDelegate();
try {
    FileOutputStream output = new FileOutputStream("workspace.xml");
    toolWindowManager.getPersistenceDelegate().save(output);
    output.close();
} catch (Exception e) {
    e.printStackTrace();
}</source>
            </subsection>
            <subsection name="PersistenceDelegate - Apply stored Workspace">
                <p>
                    After you have obtained an instance of the PersistenceDelegate for a specific ToolWindowManager use
                    the following to apply a saved workspace to the current workspace:
                </p>
                <source>PersistenceDelegate persistenceDelegate = toolWindowManager.getPersistenceDelegate();
try {
    FileInputStream inputStream = new FileInputStream("workspace.xml");
    toolWindowManager.getPersistenceDelegate().apply(inputStream);
    inputStream.close();
} catch (Exception e1) {
    e1.printStackTrace();
}</source>

                <p>
                    Using <code>merge(InputStream, MergePolicy)</code> method, you can decide the method's behaviour
                    relative to the tools already visible when the method is called.  
                </p>
                <source>PersistenceDelegate persistenceDelegate = toolWindowManager.getPersistenceDelegate();
try {
    FileInputStream inputStream = new FileInputStream("workspace.xml");
    toolWindowManager.getPersistenceDelegate().merge(
                    inputStream,
                    PersistenceDelegate.MergePolicy.RESET);
    inputStream.close();
} catch (Exception e1) {
    e1.printStackTrace();
}</source>
            </subsection>
        </section>
    </body>
</document>
