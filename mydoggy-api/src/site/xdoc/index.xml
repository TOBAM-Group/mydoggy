<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>My Java Docking Framework-Api : Introduction</title>
        <author email="adecaro@users.sourceforge.net">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Introduction">
            <p>
                MyDoggy-Api contains the application program interface of MyDoggy to manage every aspects of the
                framework. We start introducing the main classes used to manage MyDoggy.
            </p>

            <ul>
                <li>
                    <a href="./apidocs/org/noos/xing/mydoggy/ToolWindowManager.html">
                        <code>ToolWindowManager</code>
                    </a>
                    - This interface is the main entry point to manager MyDoggy. Using this interface
                    the user can register/unregister tool windows, groups. The user can get the
                    content manager instance and type descriptor templates.
                </li>
                <li>
                    <a href="./apidocs/org/noos/xing/mydoggy/ToolWindow.html">
                        <code>ToolWindow</code>
                    </a>
                    - This interface models the concept of a secondary window that provide access to
                    and/or support for a particular functionality.
                    This interface is the main entry point to modify tool window properties. Moreover there are
                    methods to make the tool available, visible and active.
                </li>
                <li>
                    <a href="./apidocs/org/noos/xing/mydoggy/ToolWindowGroup.html">
                        <code>ToolWindowGroup</code>
                    </a>
                    - This interface lets the user to manager a group of tool window. The idea is to provide the
                    same mechanism of prospectives of eclipse ide for toolwindows. The typical usage is to
                    retrieve a group from the tool window manager and to add any toolwindows.
                    After that we can show or hide all tools registered in a group.
                </li>
                <li>
                    <a href="./apidocs/org/noos/xing/mydoggy/ContentManager.html">
                        <code>ContentManager</code>
                    </a>
                    - This manager manages the main window. You can add several contents to be displayed
                    in the main window. The user can switch between displayed contents.
                    Contents are added to the
                    <code>ContentManager</code>
                    by using the
                    <code>addContent</code>
                    method.
                </li>
                <li>
                    <a href="./apidocs/org/noos/xing/mydoggy/Content.html">
                        <code>Content</code>
                    </a>
                    - A content is a wrapper of a component decorated with some properties like
                    a title, an icon, etc. The visualization of a content depends on specific
                    platform implementation. A platform implementation can use a
                    <code>JTabbedPane</code>
                    or a
                    <code>JDesktopPane</code>
                    for example.
                </li>
                <li>
                    <a href="./apidocs/org/noos/xing/mydoggy/ContentManagerUI.html">
                        <code>ContentManagerUI</code>
                    </a>
					A ContentManagerUI is an interface to modify the ui behaviours of
					a content manager. For example this is used to modify the way a content
					is showed.
                </li>
                <li>
                    <a href="./apidocs/org/noos/xing/mydoggy/PersistenceDelegate.html">
                        <code>PersistenceDelegate</code>
                    </a>
                     This interface provides useful methods to save and load the tool window manager's workspace.
                     When you request to save the workspace, all settings of ToolWindows with relative descriptors are saved.
                     To obtain an instance of PersistenceDelegate you have to invoke the method <code>getPersistenceDelegate</code>
                     of <code>ToolWindowManager</code> interface. So you can obtain a persistence delegate specific to a
                     particular tool window manager.
                </li>
            </ul>
        </section>
    </body>
</document>
