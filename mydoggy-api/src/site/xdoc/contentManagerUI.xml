<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>MyDoggy-Api : ContentManagerUI</title>
        <author email="adecaro@users.sourceforge.net">Angelo De Caro</author>
    </properties>

    <body>
        <section name="ContentManagerUI">
            <p>
                A ContentManagerUI is an interface to modify the ui behaviours of a content manager.
                MyDoggy provides two kind of ContentManagerUI
            </p>

            <ul>
                <li>
                    <a href="./apidocs/org/noos/xing/mydoggy/TabbedContentManagerUI.html">
                        <code>TabbedContentManagerUI</code>
                    </a>
					- This manager rapresents a ui that use a component that lets the user switch between
					a group of components by clicking on a tab with a given title and/or icon (i.e. JTabbedPane).
                </li>
                <li>
                    <a href="./apidocs/org/noos/xing/mydoggy/DesktopContentManagerUI.html">
                        <code>DesktopContentManagerUI</code>
                    </a>
					- This manager rapresents a ui that use a container to create a multiple-document interface
					or a virtual desktop.
                </li>
            </ul>

			<p>
				If you want to change the ContentManagerUI use the following :
			</p>
			<source>ToolWindowManager toolWindowManager = new <a href="./../mydoggy-plaf/index.html">...</a>;
ContentManager contentManager = toolWindowManager.getContentManager();
ContentManagerUI contentManagerUI = new <a href="./../mydoggy-plaf/index.html#ContentManageUI">... TODO</a>
contentManager.setContentManagerUI(contentManagerUI);
			</source>
        </section>

        <section name="ContentUI">
            <p>
                This interface is used to modify the ui behaviours of a single content. When you define a new
                ContentManagerUI you can also extend the ContentUI interface. In fact relative to
                TabbedContentManagerUI and DesktopContentManagerUI you can found TabbedContentUI and DesktopContentUI.
                Using the default ContentUI interface you can manage transparent support and decide if a content is
                closeable and/or detachable using the ui.
            </p>
        </section>
    </body>
</document>
